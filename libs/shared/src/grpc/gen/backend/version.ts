// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.3
//   protoc               v5.28.1
// source: backend/version.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export interface GetVersionRequest {
  productId: string;
}

export interface GetSpecifiedVersionRequest {
  productId: string;
  versionId: string;
}

export interface GetVersionResponse {
  id: string;
  productId: string;
  createdAt: string;
  updatedAt: string;
  details: GetVersionResponse_Detail[];
}

export interface GetVersionResponse_Detail {
  id: string;
  key: string;
  value: string;
  createdAt: string;
  updatedAt: string;
}

export interface ListVersionsRequest {
  productId: string;
}

export interface ListVersionsResponse {
  data: ListVersionsResponse_Version[];
}

export interface ListVersionsResponse_Version {
  id: string;
  productId: string;
  createdAt: string;
  updatedAt: string;
  details: ListVersionsResponse_Version_Detail[];
}

export interface ListVersionsResponse_Version_Detail {
  id: string;
  key: string;
  value: string;
  createdAt: string;
  updatedAt: string;
}

export interface VersionServiceClient {
  getVersion(request: GetSpecifiedVersionRequest): Observable<GetVersionResponse>;

  getPrimaryVersion(request: GetVersionRequest): Observable<GetVersionResponse>;

  getRandomVersion(request: GetVersionRequest): Observable<GetVersionResponse>;

  listVersions(request: ListVersionsRequest): Observable<ListVersionsResponse>;
}

export interface VersionServiceController {
  getVersion(
    request: GetSpecifiedVersionRequest,
  ): Promise<GetVersionResponse> | Observable<GetVersionResponse> | GetVersionResponse;

  getPrimaryVersion(
    request: GetVersionRequest,
  ): Promise<GetVersionResponse> | Observable<GetVersionResponse> | GetVersionResponse;

  getRandomVersion(
    request: GetVersionRequest,
  ): Promise<GetVersionResponse> | Observable<GetVersionResponse> | GetVersionResponse;

  listVersions(
    request: ListVersionsRequest,
  ): Promise<ListVersionsResponse> | Observable<ListVersionsResponse> | ListVersionsResponse;
}

export function VersionServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getVersion", "getPrimaryVersion", "getRandomVersion", "listVersions"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("VersionService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("VersionService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const VERSION_SERVICE_NAME = "VersionService";
