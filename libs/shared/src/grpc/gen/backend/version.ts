// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "backend/version.proto" (package "backend", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message backend.CreateVersionRequest
 */
export interface CreateVersionRequest {
    /**
     * @generated from protobuf field: string product = 1;
     */
    product: string;
    /**
     * @generated from protobuf field: repeated backend.CreateVersionRequest.Detail details = 2;
     */
    details: CreateVersionRequest_Detail[];
}
/**
 * @generated from protobuf message backend.CreateVersionRequest.Detail
 */
export interface CreateVersionRequest_Detail {
    /**
     * @generated from protobuf field: string key = 1;
     */
    key: string;
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string;
}
/**
 * @generated from protobuf message backend.CreateVersionResponse
 */
export interface CreateVersionResponse {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
}
/**
 * @generated from protobuf message backend.GetRandomVersionRequest
 */
export interface GetRandomVersionRequest {
    /**
     * @generated from protobuf field: string product = 1;
     */
    product: string;
}
/**
 * @generated from protobuf message backend.GetRandomVersionResponse
 */
export interface GetRandomVersionResponse {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string product = 2;
     */
    product: string;
    /**
     * @generated from protobuf field: string createdAt = 3;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: string updatedAt = 4;
     */
    updatedAt: string;
    /**
     * @generated from protobuf field: repeated backend.GetRandomVersionResponse.Detail details = 5;
     */
    details: GetRandomVersionResponse_Detail[];
}
/**
 * @generated from protobuf message backend.GetRandomVersionResponse.Detail
 */
export interface GetRandomVersionResponse_Detail {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string key = 2;
     */
    key: string;
    /**
     * @generated from protobuf field: string value = 3;
     */
    value: string;
    /**
     * @generated from protobuf field: string createdAt = 4;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: string updatedAt = 5;
     */
    updatedAt: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateVersionRequest$Type extends MessageType<CreateVersionRequest> {
    constructor() {
        super("backend.CreateVersionRequest", [
            { no: 1, name: "product", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "details", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CreateVersionRequest_Detail }
        ]);
    }
    create(value?: PartialMessage<CreateVersionRequest>): CreateVersionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.product = "";
        message.details = [];
        if (value !== undefined)
            reflectionMergePartial<CreateVersionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateVersionRequest): CreateVersionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string product */ 1:
                    message.product = reader.string();
                    break;
                case /* repeated backend.CreateVersionRequest.Detail details */ 2:
                    message.details.push(CreateVersionRequest_Detail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateVersionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string product = 1; */
        if (message.product !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.product);
        /* repeated backend.CreateVersionRequest.Detail details = 2; */
        for (let i = 0; i < message.details.length; i++)
            CreateVersionRequest_Detail.internalBinaryWrite(message.details[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.CreateVersionRequest
 */
export const CreateVersionRequest = new CreateVersionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateVersionRequest_Detail$Type extends MessageType<CreateVersionRequest_Detail> {
    constructor() {
        super("backend.CreateVersionRequest.Detail", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateVersionRequest_Detail>): CreateVersionRequest_Detail {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.key = "";
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<CreateVersionRequest_Detail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateVersionRequest_Detail): CreateVersionRequest_Detail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateVersionRequest_Detail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.CreateVersionRequest.Detail
 */
export const CreateVersionRequest_Detail = new CreateVersionRequest_Detail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateVersionResponse$Type extends MessageType<CreateVersionResponse> {
    constructor() {
        super("backend.CreateVersionResponse", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateVersionResponse>): CreateVersionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<CreateVersionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateVersionResponse): CreateVersionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateVersionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.CreateVersionResponse
 */
export const CreateVersionResponse = new CreateVersionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRandomVersionRequest$Type extends MessageType<GetRandomVersionRequest> {
    constructor() {
        super("backend.GetRandomVersionRequest", [
            { no: 1, name: "product", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetRandomVersionRequest>): GetRandomVersionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.product = "";
        if (value !== undefined)
            reflectionMergePartial<GetRandomVersionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRandomVersionRequest): GetRandomVersionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string product */ 1:
                    message.product = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRandomVersionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string product = 1; */
        if (message.product !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.product);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.GetRandomVersionRequest
 */
export const GetRandomVersionRequest = new GetRandomVersionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRandomVersionResponse$Type extends MessageType<GetRandomVersionResponse> {
    constructor() {
        super("backend.GetRandomVersionResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "product", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "createdAt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "updatedAt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "details", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GetRandomVersionResponse_Detail }
        ]);
    }
    create(value?: PartialMessage<GetRandomVersionResponse>): GetRandomVersionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.product = "";
        message.createdAt = "";
        message.updatedAt = "";
        message.details = [];
        if (value !== undefined)
            reflectionMergePartial<GetRandomVersionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRandomVersionResponse): GetRandomVersionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string product */ 2:
                    message.product = reader.string();
                    break;
                case /* string createdAt */ 3:
                    message.createdAt = reader.string();
                    break;
                case /* string updatedAt */ 4:
                    message.updatedAt = reader.string();
                    break;
                case /* repeated backend.GetRandomVersionResponse.Detail details */ 5:
                    message.details.push(GetRandomVersionResponse_Detail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRandomVersionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string product = 2; */
        if (message.product !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.product);
        /* string createdAt = 3; */
        if (message.createdAt !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.createdAt);
        /* string updatedAt = 4; */
        if (message.updatedAt !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.updatedAt);
        /* repeated backend.GetRandomVersionResponse.Detail details = 5; */
        for (let i = 0; i < message.details.length; i++)
            GetRandomVersionResponse_Detail.internalBinaryWrite(message.details[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.GetRandomVersionResponse
 */
export const GetRandomVersionResponse = new GetRandomVersionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRandomVersionResponse_Detail$Type extends MessageType<GetRandomVersionResponse_Detail> {
    constructor() {
        super("backend.GetRandomVersionResponse.Detail", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "createdAt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "updatedAt", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetRandomVersionResponse_Detail>): GetRandomVersionResponse_Detail {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.key = "";
        message.value = "";
        message.createdAt = "";
        message.updatedAt = "";
        if (value !== undefined)
            reflectionMergePartial<GetRandomVersionResponse_Detail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRandomVersionResponse_Detail): GetRandomVersionResponse_Detail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string key */ 2:
                    message.key = reader.string();
                    break;
                case /* string value */ 3:
                    message.value = reader.string();
                    break;
                case /* string createdAt */ 4:
                    message.createdAt = reader.string();
                    break;
                case /* string updatedAt */ 5:
                    message.updatedAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRandomVersionResponse_Detail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string key = 2; */
        if (message.key !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.key);
        /* string value = 3; */
        if (message.value !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.value);
        /* string createdAt = 4; */
        if (message.createdAt !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.createdAt);
        /* string updatedAt = 5; */
        if (message.updatedAt !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.updatedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.GetRandomVersionResponse.Detail
 */
export const GetRandomVersionResponse_Detail = new GetRandomVersionResponse_Detail$Type();
/**
 * @generated ServiceType for protobuf service backend.VersionService
 */
export const VersionService = new ServiceType("backend.VersionService", [
    { name: "CreateVersion", options: {}, I: CreateVersionRequest, O: CreateVersionResponse },
    { name: "GetRandomVersion", options: {}, I: GetRandomVersionRequest, O: GetRandomVersionResponse }
]);
