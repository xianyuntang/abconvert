// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "backend/version.proto" (package "backend", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message backend.GetVersionRequest
 */
export interface GetVersionRequest {
    /**
     * @generated from protobuf field: string productId = 1;
     */
    productId: string;
}
/**
 * @generated from protobuf message backend.GetSpecifiedVersionRequest
 */
export interface GetSpecifiedVersionRequest {
    /**
     * @generated from protobuf field: string productId = 1;
     */
    productId: string;
    /**
     * @generated from protobuf field: string versionId = 2;
     */
    versionId: string;
}
/**
 * @generated from protobuf message backend.GetVersionResponse
 */
export interface GetVersionResponse {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string productId = 2;
     */
    productId: string;
    /**
     * @generated from protobuf field: string createdAt = 3;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: string updatedAt = 4;
     */
    updatedAt: string;
    /**
     * @generated from protobuf field: repeated backend.GetVersionResponse.Detail details = 5;
     */
    details: GetVersionResponse_Detail[];
}
/**
 * @generated from protobuf message backend.GetVersionResponse.Detail
 */
export interface GetVersionResponse_Detail {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string key = 2;
     */
    key: string;
    /**
     * @generated from protobuf field: string value = 3;
     */
    value: string;
    /**
     * @generated from protobuf field: string createdAt = 4;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: string updatedAt = 5;
     */
    updatedAt: string;
}
/**
 * @generated from protobuf message backend.ListVersionsRequest
 */
export interface ListVersionsRequest {
    /**
     * @generated from protobuf field: string productId = 1;
     */
    productId: string;
}
/**
 * @generated from protobuf message backend.ListVersionsResponse
 */
export interface ListVersionsResponse {
    /**
     * @generated from protobuf field: repeated backend.ListVersionsResponse.Version data = 1;
     */
    data: ListVersionsResponse_Version[];
}
/**
 * @generated from protobuf message backend.ListVersionsResponse.Version
 */
export interface ListVersionsResponse_Version {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string productId = 2;
     */
    productId: string;
    /**
     * @generated from protobuf field: string createdAt = 3;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: string updatedAt = 4;
     */
    updatedAt: string;
    /**
     * @generated from protobuf field: repeated backend.ListVersionsResponse.Version.Detail details = 5;
     */
    details: ListVersionsResponse_Version_Detail[];
}
/**
 * @generated from protobuf message backend.ListVersionsResponse.Version.Detail
 */
export interface ListVersionsResponse_Version_Detail {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string key = 2;
     */
    key: string;
    /**
     * @generated from protobuf field: string value = 3;
     */
    value: string;
    /**
     * @generated from protobuf field: string createdAt = 4;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: string updatedAt = 5;
     */
    updatedAt: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetVersionRequest$Type extends MessageType<GetVersionRequest> {
    constructor() {
        super("backend.GetVersionRequest", [
            { no: 1, name: "productId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetVersionRequest>): GetVersionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.productId = "";
        if (value !== undefined)
            reflectionMergePartial<GetVersionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetVersionRequest): GetVersionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string productId */ 1:
                    message.productId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetVersionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string productId = 1; */
        if (message.productId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.productId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.GetVersionRequest
 */
export const GetVersionRequest = new GetVersionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSpecifiedVersionRequest$Type extends MessageType<GetSpecifiedVersionRequest> {
    constructor() {
        super("backend.GetSpecifiedVersionRequest", [
            { no: 1, name: "productId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "versionId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetSpecifiedVersionRequest>): GetSpecifiedVersionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.productId = "";
        message.versionId = "";
        if (value !== undefined)
            reflectionMergePartial<GetSpecifiedVersionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSpecifiedVersionRequest): GetSpecifiedVersionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string productId */ 1:
                    message.productId = reader.string();
                    break;
                case /* string versionId */ 2:
                    message.versionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSpecifiedVersionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string productId = 1; */
        if (message.productId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.productId);
        /* string versionId = 2; */
        if (message.versionId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.versionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.GetSpecifiedVersionRequest
 */
export const GetSpecifiedVersionRequest = new GetSpecifiedVersionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetVersionResponse$Type extends MessageType<GetVersionResponse> {
    constructor() {
        super("backend.GetVersionResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "productId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "createdAt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "updatedAt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "details", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GetVersionResponse_Detail }
        ]);
    }
    create(value?: PartialMessage<GetVersionResponse>): GetVersionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.productId = "";
        message.createdAt = "";
        message.updatedAt = "";
        message.details = [];
        if (value !== undefined)
            reflectionMergePartial<GetVersionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetVersionResponse): GetVersionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string productId */ 2:
                    message.productId = reader.string();
                    break;
                case /* string createdAt */ 3:
                    message.createdAt = reader.string();
                    break;
                case /* string updatedAt */ 4:
                    message.updatedAt = reader.string();
                    break;
                case /* repeated backend.GetVersionResponse.Detail details */ 5:
                    message.details.push(GetVersionResponse_Detail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetVersionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string productId = 2; */
        if (message.productId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.productId);
        /* string createdAt = 3; */
        if (message.createdAt !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.createdAt);
        /* string updatedAt = 4; */
        if (message.updatedAt !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.updatedAt);
        /* repeated backend.GetVersionResponse.Detail details = 5; */
        for (let i = 0; i < message.details.length; i++)
            GetVersionResponse_Detail.internalBinaryWrite(message.details[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.GetVersionResponse
 */
export const GetVersionResponse = new GetVersionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetVersionResponse_Detail$Type extends MessageType<GetVersionResponse_Detail> {
    constructor() {
        super("backend.GetVersionResponse.Detail", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "createdAt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "updatedAt", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetVersionResponse_Detail>): GetVersionResponse_Detail {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.key = "";
        message.value = "";
        message.createdAt = "";
        message.updatedAt = "";
        if (value !== undefined)
            reflectionMergePartial<GetVersionResponse_Detail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetVersionResponse_Detail): GetVersionResponse_Detail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string key */ 2:
                    message.key = reader.string();
                    break;
                case /* string value */ 3:
                    message.value = reader.string();
                    break;
                case /* string createdAt */ 4:
                    message.createdAt = reader.string();
                    break;
                case /* string updatedAt */ 5:
                    message.updatedAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetVersionResponse_Detail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string key = 2; */
        if (message.key !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.key);
        /* string value = 3; */
        if (message.value !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.value);
        /* string createdAt = 4; */
        if (message.createdAt !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.createdAt);
        /* string updatedAt = 5; */
        if (message.updatedAt !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.updatedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.GetVersionResponse.Detail
 */
export const GetVersionResponse_Detail = new GetVersionResponse_Detail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListVersionsRequest$Type extends MessageType<ListVersionsRequest> {
    constructor() {
        super("backend.ListVersionsRequest", [
            { no: 1, name: "productId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListVersionsRequest>): ListVersionsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.productId = "";
        if (value !== undefined)
            reflectionMergePartial<ListVersionsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListVersionsRequest): ListVersionsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string productId */ 1:
                    message.productId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListVersionsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string productId = 1; */
        if (message.productId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.productId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.ListVersionsRequest
 */
export const ListVersionsRequest = new ListVersionsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListVersionsResponse$Type extends MessageType<ListVersionsResponse> {
    constructor() {
        super("backend.ListVersionsResponse", [
            { no: 1, name: "data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListVersionsResponse_Version }
        ]);
    }
    create(value?: PartialMessage<ListVersionsResponse>): ListVersionsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = [];
        if (value !== undefined)
            reflectionMergePartial<ListVersionsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListVersionsResponse): ListVersionsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated backend.ListVersionsResponse.Version data */ 1:
                    message.data.push(ListVersionsResponse_Version.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListVersionsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated backend.ListVersionsResponse.Version data = 1; */
        for (let i = 0; i < message.data.length; i++)
            ListVersionsResponse_Version.internalBinaryWrite(message.data[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.ListVersionsResponse
 */
export const ListVersionsResponse = new ListVersionsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListVersionsResponse_Version$Type extends MessageType<ListVersionsResponse_Version> {
    constructor() {
        super("backend.ListVersionsResponse.Version", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "productId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "createdAt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "updatedAt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "details", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ListVersionsResponse_Version_Detail }
        ]);
    }
    create(value?: PartialMessage<ListVersionsResponse_Version>): ListVersionsResponse_Version {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.productId = "";
        message.createdAt = "";
        message.updatedAt = "";
        message.details = [];
        if (value !== undefined)
            reflectionMergePartial<ListVersionsResponse_Version>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListVersionsResponse_Version): ListVersionsResponse_Version {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string productId */ 2:
                    message.productId = reader.string();
                    break;
                case /* string createdAt */ 3:
                    message.createdAt = reader.string();
                    break;
                case /* string updatedAt */ 4:
                    message.updatedAt = reader.string();
                    break;
                case /* repeated backend.ListVersionsResponse.Version.Detail details */ 5:
                    message.details.push(ListVersionsResponse_Version_Detail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListVersionsResponse_Version, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string productId = 2; */
        if (message.productId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.productId);
        /* string createdAt = 3; */
        if (message.createdAt !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.createdAt);
        /* string updatedAt = 4; */
        if (message.updatedAt !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.updatedAt);
        /* repeated backend.ListVersionsResponse.Version.Detail details = 5; */
        for (let i = 0; i < message.details.length; i++)
            ListVersionsResponse_Version_Detail.internalBinaryWrite(message.details[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.ListVersionsResponse.Version
 */
export const ListVersionsResponse_Version = new ListVersionsResponse_Version$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListVersionsResponse_Version_Detail$Type extends MessageType<ListVersionsResponse_Version_Detail> {
    constructor() {
        super("backend.ListVersionsResponse.Version.Detail", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "createdAt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "updatedAt", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListVersionsResponse_Version_Detail>): ListVersionsResponse_Version_Detail {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.key = "";
        message.value = "";
        message.createdAt = "";
        message.updatedAt = "";
        if (value !== undefined)
            reflectionMergePartial<ListVersionsResponse_Version_Detail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListVersionsResponse_Version_Detail): ListVersionsResponse_Version_Detail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string key */ 2:
                    message.key = reader.string();
                    break;
                case /* string value */ 3:
                    message.value = reader.string();
                    break;
                case /* string createdAt */ 4:
                    message.createdAt = reader.string();
                    break;
                case /* string updatedAt */ 5:
                    message.updatedAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListVersionsResponse_Version_Detail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string key = 2; */
        if (message.key !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.key);
        /* string value = 3; */
        if (message.value !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.value);
        /* string createdAt = 4; */
        if (message.createdAt !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.createdAt);
        /* string updatedAt = 5; */
        if (message.updatedAt !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.updatedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.ListVersionsResponse.Version.Detail
 */
export const ListVersionsResponse_Version_Detail = new ListVersionsResponse_Version_Detail$Type();
/**
 * @generated ServiceType for protobuf service backend.VersionService
 */
export const VersionService = new ServiceType("backend.VersionService", [
    { name: "GetVersion", options: {}, I: GetSpecifiedVersionRequest, O: GetVersionResponse },
    { name: "GetPrimaryVersion", options: {}, I: GetVersionRequest, O: GetVersionResponse },
    { name: "GetRandomVersion", options: {}, I: GetVersionRequest, O: GetVersionResponse },
    { name: "ListVersions", options: {}, I: ListVersionsRequest, O: ListVersionsResponse }
]);
