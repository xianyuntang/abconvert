// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "backend/version.proto" (package "backend", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { VersionService } from "./version";
import type { GetRandomVersionResponse } from "./version";
import type { GetRandomVersionRequest } from "./version";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateVersionResponse } from "./version";
import type { CreateVersionRequest } from "./version";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service backend.VersionService
 */
export interface IVersionServiceClient {
    /**
     * @generated from protobuf rpc: CreateVersion(backend.CreateVersionRequest) returns (backend.CreateVersionResponse);
     */
    createVersion(input: CreateVersionRequest, options?: RpcOptions): UnaryCall<CreateVersionRequest, CreateVersionResponse>;
    /**
     * @generated from protobuf rpc: GetRandomVersion(backend.GetRandomVersionRequest) returns (backend.GetRandomVersionResponse);
     */
    getRandomVersion(input: GetRandomVersionRequest, options?: RpcOptions): UnaryCall<GetRandomVersionRequest, GetRandomVersionResponse>;
}
/**
 * @generated from protobuf service backend.VersionService
 */
export class VersionServiceClient implements IVersionServiceClient, ServiceInfo {
    typeName = VersionService.typeName;
    methods = VersionService.methods;
    options = VersionService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateVersion(backend.CreateVersionRequest) returns (backend.CreateVersionResponse);
     */
    createVersion(input: CreateVersionRequest, options?: RpcOptions): UnaryCall<CreateVersionRequest, CreateVersionResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateVersionRequest, CreateVersionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetRandomVersion(backend.GetRandomVersionRequest) returns (backend.GetRandomVersionResponse);
     */
    getRandomVersion(input: GetRandomVersionRequest, options?: RpcOptions): UnaryCall<GetRandomVersionRequest, GetRandomVersionResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetRandomVersionRequest, GetRandomVersionResponse>("unary", this._transport, method, opt, input);
    }
}
