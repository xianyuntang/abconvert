// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "backend/version.proto" (package "backend", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { VersionService } from "./version";
import type { ListVersionsResponse } from "./version";
import type { ListVersionsRequest } from "./version";
import type { GetVersionRequest } from "./version";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetVersionResponse } from "./version";
import type { GetSpecifiedVersionRequest } from "./version";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service backend.VersionService
 */
export interface IVersionServiceClient {
    /**
     * @generated from protobuf rpc: GetVersion(backend.GetSpecifiedVersionRequest) returns (backend.GetVersionResponse);
     */
    getVersion(input: GetSpecifiedVersionRequest, options?: RpcOptions): UnaryCall<GetSpecifiedVersionRequest, GetVersionResponse>;
    /**
     * @generated from protobuf rpc: GetPrimaryVersion(backend.GetVersionRequest) returns (backend.GetVersionResponse);
     */
    getPrimaryVersion(input: GetVersionRequest, options?: RpcOptions): UnaryCall<GetVersionRequest, GetVersionResponse>;
    /**
     * @generated from protobuf rpc: GetRandomVersion(backend.GetVersionRequest) returns (backend.GetVersionResponse);
     */
    getRandomVersion(input: GetVersionRequest, options?: RpcOptions): UnaryCall<GetVersionRequest, GetVersionResponse>;
    /**
     * @generated from protobuf rpc: ListVersions(backend.ListVersionsRequest) returns (backend.ListVersionsResponse);
     */
    listVersions(input: ListVersionsRequest, options?: RpcOptions): UnaryCall<ListVersionsRequest, ListVersionsResponse>;
}
/**
 * @generated from protobuf service backend.VersionService
 */
export class VersionServiceClient implements IVersionServiceClient, ServiceInfo {
    typeName = VersionService.typeName;
    methods = VersionService.methods;
    options = VersionService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetVersion(backend.GetSpecifiedVersionRequest) returns (backend.GetVersionResponse);
     */
    getVersion(input: GetSpecifiedVersionRequest, options?: RpcOptions): UnaryCall<GetSpecifiedVersionRequest, GetVersionResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetSpecifiedVersionRequest, GetVersionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetPrimaryVersion(backend.GetVersionRequest) returns (backend.GetVersionResponse);
     */
    getPrimaryVersion(input: GetVersionRequest, options?: RpcOptions): UnaryCall<GetVersionRequest, GetVersionResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetVersionRequest, GetVersionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetRandomVersion(backend.GetVersionRequest) returns (backend.GetVersionResponse);
     */
    getRandomVersion(input: GetVersionRequest, options?: RpcOptions): UnaryCall<GetVersionRequest, GetVersionResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetVersionRequest, GetVersionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListVersions(backend.ListVersionsRequest) returns (backend.ListVersionsResponse);
     */
    listVersions(input: ListVersionsRequest, options?: RpcOptions): UnaryCall<ListVersionsRequest, ListVersionsResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListVersionsRequest, ListVersionsResponse>("unary", this._transport, method, opt, input);
    }
}
