// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "backend/testing.proto" (package "backend", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { TestingService } from "./testing";
import type { GetTestingResponse } from "./testing";
import type { GetTestingRequest } from "./testing";
import type { GetTestingResultResponse } from "./testing";
import type { GetTestingResultRequest } from "./testing";
import type { StopTestingResponse } from "./testing";
import type { StopTestingRequest } from "./testing";
import type { GetRunningTestingResponse } from "./testing";
import type { GetRunningTestingRequest } from "./testing";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { StartTestingResponse } from "./testing";
import type { StartTestingRequest } from "./testing";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service backend.TestingService
 */
export interface ITestingServiceClient {
    /**
     * @generated from protobuf rpc: StartTesting(backend.StartTestingRequest) returns (backend.StartTestingResponse);
     */
    startTesting(input: StartTestingRequest, options?: RpcOptions): UnaryCall<StartTestingRequest, StartTestingResponse>;
    /**
     * @generated from protobuf rpc: GetRunningTesting(backend.GetRunningTestingRequest) returns (backend.GetRunningTestingResponse);
     */
    getRunningTesting(input: GetRunningTestingRequest, options?: RpcOptions): UnaryCall<GetRunningTestingRequest, GetRunningTestingResponse>;
    /**
     * @generated from protobuf rpc: StopTesting(backend.StopTestingRequest) returns (backend.StopTestingResponse);
     */
    stopTesting(input: StopTestingRequest, options?: RpcOptions): UnaryCall<StopTestingRequest, StopTestingResponse>;
    /**
     * @generated from protobuf rpc: GetTestingResult(backend.GetTestingResultRequest) returns (backend.GetTestingResultResponse);
     */
    getTestingResult(input: GetTestingResultRequest, options?: RpcOptions): UnaryCall<GetTestingResultRequest, GetTestingResultResponse>;
    /**
     * @generated from protobuf rpc: GetTestings(backend.GetTestingRequest) returns (backend.GetTestingResponse);
     */
    getTestings(input: GetTestingRequest, options?: RpcOptions): UnaryCall<GetTestingRequest, GetTestingResponse>;
}
/**
 * @generated from protobuf service backend.TestingService
 */
export class TestingServiceClient implements ITestingServiceClient, ServiceInfo {
    typeName = TestingService.typeName;
    methods = TestingService.methods;
    options = TestingService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: StartTesting(backend.StartTestingRequest) returns (backend.StartTestingResponse);
     */
    startTesting(input: StartTestingRequest, options?: RpcOptions): UnaryCall<StartTestingRequest, StartTestingResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<StartTestingRequest, StartTestingResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetRunningTesting(backend.GetRunningTestingRequest) returns (backend.GetRunningTestingResponse);
     */
    getRunningTesting(input: GetRunningTestingRequest, options?: RpcOptions): UnaryCall<GetRunningTestingRequest, GetRunningTestingResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetRunningTestingRequest, GetRunningTestingResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: StopTesting(backend.StopTestingRequest) returns (backend.StopTestingResponse);
     */
    stopTesting(input: StopTestingRequest, options?: RpcOptions): UnaryCall<StopTestingRequest, StopTestingResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<StopTestingRequest, StopTestingResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTestingResult(backend.GetTestingResultRequest) returns (backend.GetTestingResultResponse);
     */
    getTestingResult(input: GetTestingResultRequest, options?: RpcOptions): UnaryCall<GetTestingResultRequest, GetTestingResultResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTestingResultRequest, GetTestingResultResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTestings(backend.GetTestingRequest) returns (backend.GetTestingResponse);
     */
    getTestings(input: GetTestingRequest, options?: RpcOptions): UnaryCall<GetTestingRequest, GetTestingResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTestingRequest, GetTestingResponse>("unary", this._transport, method, opt, input);
    }
}
