// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "backend/testing.proto" (package "backend", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message backend.StartTestingRequest
 */
export interface StartTestingRequest {
    /**
     * @generated from protobuf field: string productId = 1;
     */
    productId: string;
    /**
     * @generated from protobuf field: repeated backend.StartTestingRequest.Detail details = 2;
     */
    details: StartTestingRequest_Detail[];
}
/**
 * @generated from protobuf message backend.StartTestingRequest.Detail
 */
export interface StartTestingRequest_Detail {
    /**
     * @generated from protobuf field: string key = 1;
     */
    key: string;
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string;
}
/**
 * @generated from protobuf message backend.StartTestingResponse
 */
export interface StartTestingResponse {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
}
/**
 * @generated from protobuf message backend.CheckTestingStatusRequest
 */
export interface CheckTestingStatusRequest {
    /**
     * @generated from protobuf field: string productId = 1;
     */
    productId: string;
}
/**
 * @generated from protobuf message backend.CheckTestingStatusResponse
 */
export interface CheckTestingStatusResponse {
    /**
     * @generated from protobuf field: string isRunning = 1;
     */
    isRunning: string;
}
/**
 * @generated from protobuf message backend.StopTestingRequest
 */
export interface StopTestingRequest {
    /**
     * @generated from protobuf field: string productId = 1;
     */
    productId: string;
}
/**
 * @generated from protobuf message backend.StopTestingResponse
 */
export interface StopTestingResponse {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class StartTestingRequest$Type extends MessageType<StartTestingRequest> {
    constructor() {
        super("backend.StartTestingRequest", [
            { no: 1, name: "productId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "details", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StartTestingRequest_Detail }
        ]);
    }
    create(value?: PartialMessage<StartTestingRequest>): StartTestingRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.productId = "";
        message.details = [];
        if (value !== undefined)
            reflectionMergePartial<StartTestingRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartTestingRequest): StartTestingRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string productId */ 1:
                    message.productId = reader.string();
                    break;
                case /* repeated backend.StartTestingRequest.Detail details */ 2:
                    message.details.push(StartTestingRequest_Detail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartTestingRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string productId = 1; */
        if (message.productId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.productId);
        /* repeated backend.StartTestingRequest.Detail details = 2; */
        for (let i = 0; i < message.details.length; i++)
            StartTestingRequest_Detail.internalBinaryWrite(message.details[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.StartTestingRequest
 */
export const StartTestingRequest = new StartTestingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartTestingRequest_Detail$Type extends MessageType<StartTestingRequest_Detail> {
    constructor() {
        super("backend.StartTestingRequest.Detail", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StartTestingRequest_Detail>): StartTestingRequest_Detail {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.key = "";
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<StartTestingRequest_Detail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartTestingRequest_Detail): StartTestingRequest_Detail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartTestingRequest_Detail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.StartTestingRequest.Detail
 */
export const StartTestingRequest_Detail = new StartTestingRequest_Detail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartTestingResponse$Type extends MessageType<StartTestingResponse> {
    constructor() {
        super("backend.StartTestingResponse", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StartTestingResponse>): StartTestingResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<StartTestingResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartTestingResponse): StartTestingResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartTestingResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.StartTestingResponse
 */
export const StartTestingResponse = new StartTestingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckTestingStatusRequest$Type extends MessageType<CheckTestingStatusRequest> {
    constructor() {
        super("backend.CheckTestingStatusRequest", [
            { no: 1, name: "productId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CheckTestingStatusRequest>): CheckTestingStatusRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.productId = "";
        if (value !== undefined)
            reflectionMergePartial<CheckTestingStatusRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckTestingStatusRequest): CheckTestingStatusRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string productId */ 1:
                    message.productId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CheckTestingStatusRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string productId = 1; */
        if (message.productId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.productId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.CheckTestingStatusRequest
 */
export const CheckTestingStatusRequest = new CheckTestingStatusRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckTestingStatusResponse$Type extends MessageType<CheckTestingStatusResponse> {
    constructor() {
        super("backend.CheckTestingStatusResponse", [
            { no: 1, name: "isRunning", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CheckTestingStatusResponse>): CheckTestingStatusResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.isRunning = "";
        if (value !== undefined)
            reflectionMergePartial<CheckTestingStatusResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckTestingStatusResponse): CheckTestingStatusResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string isRunning */ 1:
                    message.isRunning = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CheckTestingStatusResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string isRunning = 1; */
        if (message.isRunning !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.isRunning);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.CheckTestingStatusResponse
 */
export const CheckTestingStatusResponse = new CheckTestingStatusResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StopTestingRequest$Type extends MessageType<StopTestingRequest> {
    constructor() {
        super("backend.StopTestingRequest", [
            { no: 1, name: "productId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StopTestingRequest>): StopTestingRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.productId = "";
        if (value !== undefined)
            reflectionMergePartial<StopTestingRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StopTestingRequest): StopTestingRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string productId */ 1:
                    message.productId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StopTestingRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string productId = 1; */
        if (message.productId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.productId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.StopTestingRequest
 */
export const StopTestingRequest = new StopTestingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StopTestingResponse$Type extends MessageType<StopTestingResponse> {
    constructor() {
        super("backend.StopTestingResponse", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StopTestingResponse>): StopTestingResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<StopTestingResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StopTestingResponse): StopTestingResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StopTestingResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.StopTestingResponse
 */
export const StopTestingResponse = new StopTestingResponse$Type();
/**
 * @generated ServiceType for protobuf service backend.TestingService
 */
export const TestingService = new ServiceType("backend.TestingService", [
    { name: "StartTesting", options: {}, I: StartTestingRequest, O: StartTestingResponse },
    { name: "CheckTestingStatus", options: {}, I: CheckTestingStatusRequest, O: CheckTestingStatusResponse },
    { name: "StopTesting", options: {}, I: StopTestingRequest, O: StopTestingResponse }
]);
