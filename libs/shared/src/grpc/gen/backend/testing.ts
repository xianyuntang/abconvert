// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "backend/testing.proto" (package "backend", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message backend.StartTestingRequest
 */
export interface StartTestingRequest {
    /**
     * @generated from protobuf field: string productId = 1;
     */
    productId: string;
    /**
     * @generated from protobuf field: repeated backend.StartTestingRequest.Detail details = 2;
     */
    details: StartTestingRequest_Detail[];
}
/**
 * @generated from protobuf message backend.StartTestingRequest.Detail
 */
export interface StartTestingRequest_Detail {
    /**
     * @generated from protobuf field: string key = 1;
     */
    key: string;
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string;
}
/**
 * @generated from protobuf message backend.StartTestingResponse
 */
export interface StartTestingResponse {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
}
/**
 * @generated from protobuf message backend.GetRunningTestingRequest
 */
export interface GetRunningTestingRequest {
    /**
     * @generated from protobuf field: string productId = 1;
     */
    productId: string;
}
/**
 * @generated from protobuf message backend.GetRunningTestingResponse
 */
export interface GetRunningTestingResponse {
    /**
     * @generated from protobuf field: optional string id = 1;
     */
    id?: string;
}
/**
 * @generated from protobuf message backend.StopTestingRequest
 */
export interface StopTestingRequest {
    /**
     * @generated from protobuf field: string productId = 1;
     */
    productId: string;
}
/**
 * @generated from protobuf message backend.StopTestingResponse
 */
export interface StopTestingResponse {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
}
/**
 * @generated from protobuf message backend.GetTestingResultRequest
 */
export interface GetTestingResultRequest {
    /**
     * @generated from protobuf field: string productId = 1;
     */
    productId: string;
    /**
     * @generated from protobuf field: string testingId = 2;
     */
    testingId: string;
}
/**
 * @generated from protobuf message backend.GetTestingResultResponse
 */
export interface GetTestingResultResponse {
    /**
     * @generated from protobuf field: backend.GetTestingResultResponse.Statistics primary = 1;
     */
    primary?: GetTestingResultResponse_Statistics;
    /**
     * @generated from protobuf field: backend.GetTestingResultResponse.Statistics testing = 2;
     */
    testing?: GetTestingResultResponse_Statistics;
    /**
     * @generated from protobuf field: repeated string clickElements = 3;
     */
    clickElements: string[];
}
/**
 * @generated from protobuf message backend.GetTestingResultResponse.Statistics
 */
export interface GetTestingResultResponse_Statistics {
    /**
     * @generated from protobuf field: int32 visits = 1;
     */
    visits: number;
    /**
     * @generated from protobuf field: double averageTimeOnPage = 2;
     */
    averageTimeOnPage: number;
    /**
     * @generated from protobuf field: map<string, int32> clickMap = 3;
     */
    clickMap: {
        [key: string]: number;
    };
}
/**
 * @generated from protobuf message backend.GetTestingRequest
 */
export interface GetTestingRequest {
    /**
     * @generated from protobuf field: string productId = 1;
     */
    productId: string;
}
/**
 * @generated from protobuf message backend.GetTestingResponse
 */
export interface GetTestingResponse {
    /**
     * @generated from protobuf field: repeated backend.GetTestingResponse.Testing data = 1;
     */
    data: GetTestingResponse_Testing[];
}
/**
 * @generated from protobuf message backend.GetTestingResponse.Testing
 */
export interface GetTestingResponse_Testing {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string primaryVersionId = 2;
     */
    primaryVersionId: string;
    /**
     * @generated from protobuf field: string testingVersionId = 3;
     */
    testingVersionId: string;
    /**
     * @generated from protobuf field: string createdAt = 4;
     */
    createdAt: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class StartTestingRequest$Type extends MessageType<StartTestingRequest> {
    constructor() {
        super("backend.StartTestingRequest", [
            { no: 1, name: "productId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "details", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StartTestingRequest_Detail }
        ]);
    }
    create(value?: PartialMessage<StartTestingRequest>): StartTestingRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.productId = "";
        message.details = [];
        if (value !== undefined)
            reflectionMergePartial<StartTestingRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartTestingRequest): StartTestingRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string productId */ 1:
                    message.productId = reader.string();
                    break;
                case /* repeated backend.StartTestingRequest.Detail details */ 2:
                    message.details.push(StartTestingRequest_Detail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartTestingRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string productId = 1; */
        if (message.productId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.productId);
        /* repeated backend.StartTestingRequest.Detail details = 2; */
        for (let i = 0; i < message.details.length; i++)
            StartTestingRequest_Detail.internalBinaryWrite(message.details[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.StartTestingRequest
 */
export const StartTestingRequest = new StartTestingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartTestingRequest_Detail$Type extends MessageType<StartTestingRequest_Detail> {
    constructor() {
        super("backend.StartTestingRequest.Detail", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StartTestingRequest_Detail>): StartTestingRequest_Detail {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.key = "";
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<StartTestingRequest_Detail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartTestingRequest_Detail): StartTestingRequest_Detail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartTestingRequest_Detail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.StartTestingRequest.Detail
 */
export const StartTestingRequest_Detail = new StartTestingRequest_Detail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartTestingResponse$Type extends MessageType<StartTestingResponse> {
    constructor() {
        super("backend.StartTestingResponse", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StartTestingResponse>): StartTestingResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<StartTestingResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartTestingResponse): StartTestingResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartTestingResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.StartTestingResponse
 */
export const StartTestingResponse = new StartTestingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRunningTestingRequest$Type extends MessageType<GetRunningTestingRequest> {
    constructor() {
        super("backend.GetRunningTestingRequest", [
            { no: 1, name: "productId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetRunningTestingRequest>): GetRunningTestingRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.productId = "";
        if (value !== undefined)
            reflectionMergePartial<GetRunningTestingRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRunningTestingRequest): GetRunningTestingRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string productId */ 1:
                    message.productId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRunningTestingRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string productId = 1; */
        if (message.productId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.productId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.GetRunningTestingRequest
 */
export const GetRunningTestingRequest = new GetRunningTestingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRunningTestingResponse$Type extends MessageType<GetRunningTestingResponse> {
    constructor() {
        super("backend.GetRunningTestingResponse", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetRunningTestingResponse>): GetRunningTestingResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetRunningTestingResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRunningTestingResponse): GetRunningTestingResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRunningTestingResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.GetRunningTestingResponse
 */
export const GetRunningTestingResponse = new GetRunningTestingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StopTestingRequest$Type extends MessageType<StopTestingRequest> {
    constructor() {
        super("backend.StopTestingRequest", [
            { no: 1, name: "productId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StopTestingRequest>): StopTestingRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.productId = "";
        if (value !== undefined)
            reflectionMergePartial<StopTestingRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StopTestingRequest): StopTestingRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string productId */ 1:
                    message.productId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StopTestingRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string productId = 1; */
        if (message.productId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.productId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.StopTestingRequest
 */
export const StopTestingRequest = new StopTestingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StopTestingResponse$Type extends MessageType<StopTestingResponse> {
    constructor() {
        super("backend.StopTestingResponse", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StopTestingResponse>): StopTestingResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<StopTestingResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StopTestingResponse): StopTestingResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StopTestingResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.StopTestingResponse
 */
export const StopTestingResponse = new StopTestingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTestingResultRequest$Type extends MessageType<GetTestingResultRequest> {
    constructor() {
        super("backend.GetTestingResultRequest", [
            { no: 1, name: "productId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "testingId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetTestingResultRequest>): GetTestingResultRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.productId = "";
        message.testingId = "";
        if (value !== undefined)
            reflectionMergePartial<GetTestingResultRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTestingResultRequest): GetTestingResultRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string productId */ 1:
                    message.productId = reader.string();
                    break;
                case /* string testingId */ 2:
                    message.testingId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTestingResultRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string productId = 1; */
        if (message.productId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.productId);
        /* string testingId = 2; */
        if (message.testingId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.testingId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.GetTestingResultRequest
 */
export const GetTestingResultRequest = new GetTestingResultRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTestingResultResponse$Type extends MessageType<GetTestingResultResponse> {
    constructor() {
        super("backend.GetTestingResultResponse", [
            { no: 1, name: "primary", kind: "message", T: () => GetTestingResultResponse_Statistics },
            { no: 2, name: "testing", kind: "message", T: () => GetTestingResultResponse_Statistics },
            { no: 3, name: "clickElements", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetTestingResultResponse>): GetTestingResultResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clickElements = [];
        if (value !== undefined)
            reflectionMergePartial<GetTestingResultResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTestingResultResponse): GetTestingResultResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* backend.GetTestingResultResponse.Statistics primary */ 1:
                    message.primary = GetTestingResultResponse_Statistics.internalBinaryRead(reader, reader.uint32(), options, message.primary);
                    break;
                case /* backend.GetTestingResultResponse.Statistics testing */ 2:
                    message.testing = GetTestingResultResponse_Statistics.internalBinaryRead(reader, reader.uint32(), options, message.testing);
                    break;
                case /* repeated string clickElements */ 3:
                    message.clickElements.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTestingResultResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* backend.GetTestingResultResponse.Statistics primary = 1; */
        if (message.primary)
            GetTestingResultResponse_Statistics.internalBinaryWrite(message.primary, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* backend.GetTestingResultResponse.Statistics testing = 2; */
        if (message.testing)
            GetTestingResultResponse_Statistics.internalBinaryWrite(message.testing, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated string clickElements = 3; */
        for (let i = 0; i < message.clickElements.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.clickElements[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.GetTestingResultResponse
 */
export const GetTestingResultResponse = new GetTestingResultResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTestingResultResponse_Statistics$Type extends MessageType<GetTestingResultResponse_Statistics> {
    constructor() {
        super("backend.GetTestingResultResponse.Statistics", [
            { no: 1, name: "visits", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "averageTimeOnPage", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "clickMap", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 5 /*ScalarType.INT32*/ } }
        ]);
    }
    create(value?: PartialMessage<GetTestingResultResponse_Statistics>): GetTestingResultResponse_Statistics {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.visits = 0;
        message.averageTimeOnPage = 0;
        message.clickMap = {};
        if (value !== undefined)
            reflectionMergePartial<GetTestingResultResponse_Statistics>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTestingResultResponse_Statistics): GetTestingResultResponse_Statistics {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 visits */ 1:
                    message.visits = reader.int32();
                    break;
                case /* double averageTimeOnPage */ 2:
                    message.averageTimeOnPage = reader.double();
                    break;
                case /* map<string, int32> clickMap */ 3:
                    this.binaryReadMap3(message.clickMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: GetTestingResultResponse_Statistics["clickMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GetTestingResultResponse_Statistics["clickMap"] | undefined, val: GetTestingResultResponse_Statistics["clickMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.int32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field backend.GetTestingResultResponse.Statistics.clickMap");
            }
        }
        map[key ?? ""] = val ?? 0;
    }
    internalBinaryWrite(message: GetTestingResultResponse_Statistics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 visits = 1; */
        if (message.visits !== 0)
            writer.tag(1, WireType.Varint).int32(message.visits);
        /* double averageTimeOnPage = 2; */
        if (message.averageTimeOnPage !== 0)
            writer.tag(2, WireType.Bit64).double(message.averageTimeOnPage);
        /* map<string, int32> clickMap = 3; */
        for (let k of globalThis.Object.keys(message.clickMap))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.Varint).int32(message.clickMap[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.GetTestingResultResponse.Statistics
 */
export const GetTestingResultResponse_Statistics = new GetTestingResultResponse_Statistics$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTestingRequest$Type extends MessageType<GetTestingRequest> {
    constructor() {
        super("backend.GetTestingRequest", [
            { no: 1, name: "productId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetTestingRequest>): GetTestingRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.productId = "";
        if (value !== undefined)
            reflectionMergePartial<GetTestingRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTestingRequest): GetTestingRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string productId */ 1:
                    message.productId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTestingRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string productId = 1; */
        if (message.productId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.productId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.GetTestingRequest
 */
export const GetTestingRequest = new GetTestingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTestingResponse$Type extends MessageType<GetTestingResponse> {
    constructor() {
        super("backend.GetTestingResponse", [
            { no: 1, name: "data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GetTestingResponse_Testing }
        ]);
    }
    create(value?: PartialMessage<GetTestingResponse>): GetTestingResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = [];
        if (value !== undefined)
            reflectionMergePartial<GetTestingResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTestingResponse): GetTestingResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated backend.GetTestingResponse.Testing data */ 1:
                    message.data.push(GetTestingResponse_Testing.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTestingResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated backend.GetTestingResponse.Testing data = 1; */
        for (let i = 0; i < message.data.length; i++)
            GetTestingResponse_Testing.internalBinaryWrite(message.data[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.GetTestingResponse
 */
export const GetTestingResponse = new GetTestingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTestingResponse_Testing$Type extends MessageType<GetTestingResponse_Testing> {
    constructor() {
        super("backend.GetTestingResponse.Testing", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "primaryVersionId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "testingVersionId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "createdAt", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetTestingResponse_Testing>): GetTestingResponse_Testing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.primaryVersionId = "";
        message.testingVersionId = "";
        message.createdAt = "";
        if (value !== undefined)
            reflectionMergePartial<GetTestingResponse_Testing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTestingResponse_Testing): GetTestingResponse_Testing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string primaryVersionId */ 2:
                    message.primaryVersionId = reader.string();
                    break;
                case /* string testingVersionId */ 3:
                    message.testingVersionId = reader.string();
                    break;
                case /* string createdAt */ 4:
                    message.createdAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTestingResponse_Testing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string primaryVersionId = 2; */
        if (message.primaryVersionId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.primaryVersionId);
        /* string testingVersionId = 3; */
        if (message.testingVersionId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.testingVersionId);
        /* string createdAt = 4; */
        if (message.createdAt !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.createdAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message backend.GetTestingResponse.Testing
 */
export const GetTestingResponse_Testing = new GetTestingResponse_Testing$Type();
/**
 * @generated ServiceType for protobuf service backend.TestingService
 */
export const TestingService = new ServiceType("backend.TestingService", [
    { name: "StartTesting", options: {}, I: StartTestingRequest, O: StartTestingResponse },
    { name: "GetRunningTesting", options: {}, I: GetRunningTestingRequest, O: GetRunningTestingResponse },
    { name: "StopTesting", options: {}, I: StopTestingRequest, O: StopTestingResponse },
    { name: "GetTestingResult", options: {}, I: GetTestingResultRequest, O: GetTestingResultResponse },
    { name: "GetTestings", options: {}, I: GetTestingRequest, O: GetTestingResponse }
]);
